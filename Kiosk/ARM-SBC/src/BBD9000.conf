# BBD9000.conf BBD9000 configuration file
# Values here override the hard-coded defaults in BBD9000init.c
# New parameters must be included in BBD9000init.c, and in BBD9000mem.h
# Lat + lon. Used to calculate dusk/dawn for lighting.
# e.g., for 2800 Sisson St., Baltimore, MD:
kiosk_id           = 6
kiosk_name         = "Test Kiosk 6"
location_lat       = 39.3194
location_lon       = -76.6253

# Coop name: maximum 32 characters (#define COOP_NAME_SIZE 32 in BBD9000mem.h)
coop-name          = "Baltimore Biodiesel"

# Paths to various configuration files
# These are relative to the BBD9000 PREFIX unless the path begins with "/"
# The BBD9000 PREFIX is determined by the location of the BBD9000init executable.
# The name of the configuration file is hard-coded to BBD9000.conf, and is always
# in the same directory as the BBD9000 PREFIX.
BBD9000LOG         = "BBD9000.log"
BBD9000-run        = "BBD9000-run.conf"
BBD9000-cal        = "BBD9000-cal.conf"
BBD9000key         = "BBD9000.pem"
BBD9000srv_key     = "BBD-pub.pem"
BBD9000ccGWconf    = "AuthDotNet.conf"
BBD9000patch       = "BBD9000patch"

# Path to a shared-memory filesystem such as tmpfs, ramfs, etc (not written to disk)
# /var/run is usually used for this purpose.
# the last component of the path should be a directory, which will be created if
# it doesn't already exist.  The path should be specified such that the OS creates
# all but the final path component when it starts up.
BBD9000run         = "/var/run/BBD9000"

# Path to device with attached SmartIO board (an RS232 COM port)
SmartIOdev         = "/dev/ttyAPP0"
# The SmartIO baud rate
# The possible baud rates are: 50, 75, 110, 134, 150, 200, 300, 600,
# 1200, 1800, 2400, 4800, 9600, 19200, 38400, 57600, 115200
# Setting an unsupported baud, or one that doesn't match the SmartIO board's
# is obviously a big no-no
SmartIObaud        = 115200
has-DRSN           = true

# Modem device
Modemdev        = "/dev/tts/0"

# ADC readings every 0.5 seconds (temp, current, voltage, etc).
# Used during "live" display of SmartIO data.
smartIO_interval   = 500


# URL for our "back-end" server
server_URL         = "http://test.bbd9000.com/fcgi-bin/BBD-kiosk.pl"
#server_URL         = "http://baltimorebiodiesel.org/fcgi-bin/test/BBD-kiosk.pl"
#server_URL         = "http://10.0.1.100/fcgi-bin/BBD-kiosk.pl"
#server_URL         = "http://192.168.1.118/fcgi-bin/BBD-kiosk.pl"

# URL for our patch server
patch_server       = "http://bbdc.bbd9000.com/Patches"

# Minimum amount to send to CC processor
cc_threshold       = 1.00

# How long to wait for the server to respond to a request before retrying.
# Triggers a "Network Timeout" event
# This time must be large enough for the server to respond under worst-case conditions
# This includes the time it may take the server to communicate with the gateway.
# Unlike most time settings, this is in SECONDS!!
network_timeout    = 60

# How often to check-in with the server
# when there is a network and when there isn't.
# 300,000 milliseconds = 5 min with a network
#   6,000 milliseconds = 6 secs without a network
#  ** Note that this value should be longer than the network timeout above.
# Triggers a "Status Timeout" event
status_interval_net     = 43200000
#status_interval_net    = 300000

# Initial retry interval when a network error or timeout happens
# The interval is doubled for every retry until it reaches max_status_interval_no_net
# Then, a connection is retried every max_status_interval_no_net forever.
# with 30000 millisecond status_interval_no_net (30 seconds) and 43200000 max,
# There will be 11 retries until a 12 hour maximum is reached, then every 12 hours.
status_interval_no_net  = 30000
max_status_interval_no_net = 43200000
# This is a network check only - no data is transmitted
netIdle_timeout = 300000


# How long to wait for fuel to start flowing before
# aborting the transaction (120,000 milliseconds = 2 min)
# Triggers a "Dispensing Timeout" event
dispensing_timeout = 120000

# How long to wait for the user to enter something before
# aborting the transaction (30,000 milliseconds = 30 seconds)
# Triggers a "Input Timeout" event
input_timeout      = 30000

# How long to wait before clearing the LCD
# Triggers a "LCD Timeout" event
lcd_timeout      = 30000

# How long to wait before refreshing the LCD with a new message unless its forced
# Triggers a "LCD-Refresh Timeout" event
lcd_refresh_timeout = 3000

# How long to keep the strike relay activated (30,000 milliseconds = 30 seconds)
strike_rly_timeout   = 30000

# How long to wait b/w the last CC swipe and giving up entirely
# when dealing with rejected cards
CC_reswipe_timeout   = 60000

# How long to wait b/w asking to shut the door
# and giving up entirely on that
door_close_timeout   = 45000
